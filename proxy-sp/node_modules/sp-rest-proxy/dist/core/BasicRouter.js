"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicRouter = void 0;
var client_1 = require("../utils/client");
var url_1 = require("../utils/url");
var logger_1 = require("../utils/logger");
var headers_1 = require("../utils/headers");
var keepHeaders = ['cache-control', 'content-length', 'content-type', 'date', 'etag', 'expires', 'last-modified', 'request-id'];
var BasicRouter = (function () {
    function BasicRouter(ctx, settings) {
        var _this = this;
        this.ctx = ctx;
        this.settings = settings;
        this.handlers = {
            isOK: function (resp) { return __awaiter(_this, void 0, void 0, function () {
                var error, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!resp.ok) return [3, 5];
                            error = {
                                status: resp.status,
                                statusText: resp.statusText,
                                response: resp
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = error;
                            return [4, resp.clone().text()];
                        case 2:
                            _a.body = _b.sent();
                            return [3, 4];
                        case 3:
                            ex_1 = _b.sent();
                            return [3, 4];
                        case 4: throw error;
                        case 5: return [2, resp];
                    }
                });
            }); },
            response: function (r) { return function (resp, bodyReader) { return __awaiter(_this, void 0, void 0, function () {
                var data, ex_2, ct;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            bodyReader = bodyReader || (function (a) { return a.text(); });
                            return [4, bodyReader(resp)];
                        case 1:
                            data = _b.sent();
                            this.logger.verbose(resp.status, "" + data);
                            if (!(typeof ((_a = this.settings.hooks) === null || _a === void 0 ? void 0 : _a.responseMapper) === 'function')) return [3, 5];
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 4, , 5]);
                            return [4, this.settings.hooks.responseMapper(r.req, resp, this)];
                        case 3:
                            resp = _b.sent();
                            return [3, 5];
                        case 4:
                            ex_2 = _b.sent();
                            return [3, 5];
                        case 5:
                            headers_1.copyHeaders(r, resp.headers, [], ['content-encoding', 'content-security-policy', 'set-cookie', 'transfer-encoding']);
                            r.status(resp.status);
                            ct = resp.headers.get('content-type');
                            if (ct) {
                                r.contentType(ct);
                            }
                            r.send(data);
                            return [2];
                    }
                });
            }); }; },
            error: function (r) { return function (err) {
                var status = err.status, statusText = err.statusText, body = err.body, apiResp = err.response;
                if (status) {
                    _this.logger.error('Error', { status: status, statusText: statusText, body: body });
                }
                else {
                    _this.logger.error('Error', err);
                }
                r.status(status || 400);
                if (apiResp) {
                    headers_1.copyHeaders(r, apiResp.headers, keepHeaders);
                    var ct = apiResp.headers.get('content-type');
                    if (ct) {
                        r.contentType(ct);
                    }
                }
                var message = err.message;
                r.send(body ||
                    statusText ||
                    (message && "Proxy Error: " + message + " (see more in sp-rest-proxy console)") ||
                    'Unknown error');
            }; }
        };
        this.sp = new client_1.SPClient(ctx, settings);
        this.url = new url_1.UrlUtils(ctx, settings);
        this.logger = new logger_1.Logger(settings.logLevel);
    }
    return BasicRouter;
}());
exports.BasicRouter = BasicRouter;
//# sourceMappingURL=BasicRouter.js.map