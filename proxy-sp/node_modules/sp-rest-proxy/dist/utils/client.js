"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPClient = void 0;
var spauth = require("node-sp-auth");
var node_fetch_1 = require("node-fetch");
var https = require("https");
var http = require("http");
var cache_1 = require("./cache");
var headers_1 = require("./headers");
var SPClient = (function () {
    function SPClient(ctx, settings) {
        var _this = this;
        this.ctx = ctx;
        this.settings = settings;
        this.agent = null;
        this.fetch = function (url, init) {
            if (init === void 0) { init = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var auth, digest, ex_1, opts;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, spauth.getAuth(this.ctx.siteUrl, this.ctx.authOptions)];
                        case 1:
                            auth = _a.sent();
                            if (!(init.method === 'POST')) return [3, 6];
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            if (!(!digest && url.toLowerCase().indexOf('/_api/contextinfo') === -1)) return [3, 4];
                            return [4, this.requestDigest(url.split('/_api')[0].split('/_vti_bin')[0])];
                        case 3:
                            digest = _a.sent();
                            _a.label = 4;
                        case 4: return [3, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3, 6];
                        case 6:
                            opts = __assign(__assign(__assign({ agent: this.agent }, init), auth.options || {}), { headers: headers_1.mergeHeaders(init === null || init === void 0 ? void 0 : init.headers, new node_fetch_1.Headers(auth.headers), new node_fetch_1.Headers({ 'X-RequestDigest': digest })) });
                            return [2, node_fetch_1.default(url, opts)];
                    }
                });
            });
        };
        this.requestDigest = function (webUrl) {
            var d = cache_1.cache.get(webUrl + ":digest");
            if (d) {
                return Promise.resolve(d);
            }
            return _this.fetch(webUrl + "/_api/contextinfo", {
                method: 'POST',
                headers: new node_fetch_1.Headers({
                    Accept: 'application/json;odata=verbose'
                })
            })
                .then(function (r) {
                if (!r.ok) {
                    throw new Error(r.statusText);
                }
                return r.json();
            })
                .then(function (r) {
                var digest = r.d.GetContextWebInformation.FormDigestValue;
                var ttl = parseInt(r.d.GetContextWebInformation.FormDigestTimeoutSeconds, 10);
                cache_1.cache.set(webUrl + ":digest", digest, ttl - 30 * 1000);
                return digest;
            });
        };
        this.agent = this.settings.agent;
        if (!this.agent) {
            if (ctx.siteUrl.split('://')[0].toLowerCase() === 'https') {
                this.agent = new https.Agent({
                    rejectUnauthorized: false,
                    keepAlive: true,
                    keepAliveMsecs: 10000
                });
            }
            else {
                this.agent = new http.Agent({
                    keepAlive: true,
                    keepAliveMsecs: 10000
                });
            }
        }
    }
    return SPClient;
}());
exports.SPClient = SPClient;
//# sourceMappingURL=client.js.map